# TinyS3 ESP32-S3 ESP-IDF Justfile
# WiFi/HTTP Controller with UART to XIAO C6

# Default device path (adjust if needed)
DEVICE_PATH := "/dev/ttyACM0"

# List all available commands
default:
    @just --list

# Set ESP-IDF target to ESP32-S3 (run once after cloning)
set-target:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! command -v idf.py &> /dev/null; then \
        echo "‚ùå ERROR: idf.py not found!"; \
        echo ""; \
        echo "Please source ESP-IDF environment first:"; \
        echo "  . \$HOME/esp/esp-idf/export.sh"; \
        echo "  OR"; \
        echo "  . /opt/esp-idf/export.sh"; \
        exit 1; \
    fi
    echo "üéØ Setting target to ESP32-S3..."
    idf.py set-target esp32s3
    echo "‚úÖ Target set! Now run: just menuconfig (to set WiFi credentials)"

# Configure the project (IMPORTANT: set WiFi SSID and password here!)
menuconfig:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "‚öôÔ∏è  Opening ESP-IDF configuration menu..."
    echo ""
    echo "üì° IMPORTANT: Configure WiFi credentials!"
    echo "   Set: WiFi SSID"
    echo "   Set: WiFi Password"
    echo ""
    read -p "Press Enter to open menuconfig..."
    idf.py menuconfig

# Build the project
build:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! command -v idf.py &> /dev/null; then \
        echo "‚ùå ERROR: idf.py not found!"; \
        echo ""; \
        echo "Please source ESP-IDF environment first:"; \
        echo "  . \$HOME/esp/esp-idf/export.sh"; \
        exit 1; \
    fi
    echo "üî® Building project..."
    idf.py build

# Clean build artifacts
clean:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üßπ Cleaning build artifacts..."
    idf.py fullclean

# Flash firmware to device
flash:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì• Flashing firmware to TinyS3 ESP32-S3..."

    DEVICE="{{DEVICE_PATH}}"
    if [ ! -e "$DEVICE" ]; then
        echo "‚ùå Device not found at $DEVICE"
        echo "   Check connection and adjust DEVICE_PATH in Justfile"
        exit 1
    fi

    idf.py -p "$DEVICE" flash

# Monitor serial output from device
monitor:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì∫ Monitoring device output..."
    echo "   Press Ctrl+] to exit"

    DEVICE="{{DEVICE_PATH}}"
    idf.py -p "$DEVICE" monitor

# Build and flash in one command
flash-monitor: build flash monitor

# Erase flash completely
erase:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üî• Erasing flash memory..."

    DEVICE="{{DEVICE_PATH}}"
    idf.py -p "$DEVICE" erase-flash

# Development workflow: build, flash, and monitor
dev: build flash monitor

# Show app size information
size:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üìè Analyzing app size..."
    idf.py size

# Show partition table
show-partitions:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üíæ Partition table:"
    idf.py partition-table

# Quick setup guide
help:
    @echo "üéÉ TinyS3 WiFi/HTTP Controller - Quick Start Guide"
    @echo "=================================================="
    @echo ""
    @echo "1Ô∏è‚É£  First time setup:"
    @echo "   just set-target       # Configure for ESP32-S3"
    @echo "   just menuconfig       # Set WiFi credentials!"
    @echo ""
    @echo "2Ô∏è‚É£  Build and flash:"
    @echo "   just build           # Compile the firmware"
    @echo "   just flash           # Upload to device"
    @echo "   just monitor         # View serial output"
    @echo ""
    @echo "3Ô∏è‚É£  Or do it all at once:"
    @echo "   just dev             # Build + flash + monitor"
    @echo ""
    @echo "4Ô∏è‚É£  Access web interface:"
    @echo "   After flashing, check serial monitor for IP address"
    @echo "   Open http://<device-ip>/ in your browser"
    @echo ""
    @echo "üìö More commands: just --list"
