# XIAO ESP32-C6 ESP-IDF Justfile
# Zigbee Coordinator with UART to TinyS3

# Default device path (adjust if needed)
DEVICE_PATH := "/dev/ttyACM1"

# List all available commands
default:
    @just --list

# Set ESP-IDF target to ESP32-C6 (run once after cloning)
set-target:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! command -v idf.py &> /dev/null; then \
        echo "‚ùå ERROR: idf.py not found!"; \
        echo ""; \
        echo "Please source ESP-IDF environment first:"; \
        echo "  . \$HOME/esp/esp-idf/export.sh"; \
        echo "  OR"; \
        echo "  . /opt/esp-idf/export.sh"; \
        echo ""; \
        echo "Then run: just set-target"; \
        exit 1; \
    fi
    echo "üéØ Setting target to ESP32-C6..."
    idf.py set-target esp32c6
    echo "‚úÖ Target set! Now run: just build"

# Set up ESP-IDF environment and install dependencies
setup:
    @echo "üîß Setting up ESP-IDF environment..."
    @echo "Make sure you have ESP-IDF installed and sourced:"
    @echo "  . $HOME/esp/esp-idf/export.sh"
    @echo "  OR"
    @echo "  . /opt/esp-idf/export.sh"
    @echo ""
    @echo "After sourcing, run: just set-target"
    @echo ""
    @echo "Or install ESP-IDF:"
    @echo "  https://docs.espressif.com/projects/esp-idf/en/latest/esp32c6/get-started/"

# Configure the project (optional - no WiFi needed)
menuconfig:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "‚öôÔ∏è  Opening ESP-IDF configuration menu..."
    echo ""
    echo "üì° NOTE: No WiFi configuration needed (Zigbee-only)"
    echo ""
    read -p "Press Enter to open menuconfig..."
    idf.py menuconfig

# Build the project
build:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! command -v idf.py &> /dev/null; then \
        echo "‚ùå ERROR: idf.py not found!"; \
        echo ""; \
        echo "Please source ESP-IDF environment first:"; \
        echo "  . \$HOME/esp/esp-idf/export.sh"; \
        echo "  OR"; \
        echo "  . /opt/esp-idf/export.sh"; \
        exit 1; \
    fi

    # Check if target is set correctly
    if [ ! -f sdkconfig ]; then \
        echo "‚ùå ERROR: sdkconfig not found!"; \
        echo ""; \
        echo "Please run: just set-target"; \
        echo "This will configure the project for ESP32-C6"; \
        exit 1; \
    fi

    if grep -q "CONFIG_IDF_TARGET=\"esp32\"" sdkconfig 2>/dev/null; then \
        echo "‚ùå ERROR: Target is set to esp32, but should be esp32c6!"; \
        echo ""; \
        echo "Please run: just set-target"; \
        echo "This will reconfigure for ESP32-C6"; \
        exit 1; \
    fi

    echo "üî® Building project..."
    idf.py build

# Clean build artifacts
clean:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üßπ Cleaning build artifacts..."
    idf.py fullclean

# Flash firmware to device
flash:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì• Flashing firmware to XIAO ESP32-C6..."

    DEVICE="{{DEVICE_PATH}}"
    if [ ! -e "$DEVICE" ]; then
        echo "‚ùå Device not found at $DEVICE"
        echo "   Check connection and adjust DEVICE_PATH in Justfile"
        echo "   Common paths: /dev/ttyACM1, /dev/ttyUSB0"
        exit 1
    fi

    idf.py -p "$DEVICE" flash

# Monitor serial output from device
monitor:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì∫ Monitoring device output..."
    echo "   Press Ctrl+] to exit"

    DEVICE="{{DEVICE_PATH}}"
    idf.py -p "$DEVICE" monitor

# Build and flash in one command
flash-monitor: build flash monitor

# Erase flash completely
erase:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üî• Erasing flash memory..."

    DEVICE="{{DEVICE_PATH}}"
    idf.py -p "$DEVICE" erase-flash

# Check if device is connected
check-device:
    @echo "üîç Checking for connected device..."
    @test -e "{{DEVICE_PATH}}" && echo "‚úÖ Device found at {{DEVICE_PATH}}" || echo "‚ùå Device not found at {{DEVICE_PATH}}"

# Show device information
info:
    @echo "üìä XIAO ESP32-C6 Zigbee Coordinator"
    @echo "========================================"
    @echo "Device: XIAO ESP32-C6"
    @echo "Framework: ESP-IDF"
    @echo "Chip: ESP32-C6 (RISC-V)"
    @echo "Role: Zigbee Coordinator (Zigbee-only)"
    @echo "Features:"
    @echo "  - Zigbee coordinator on channel 15"
    @echo "  - UART communication with TinyS3"
    @echo "  - Time sync from TinyS3 via UART"
    @echo "  - Controls 2 Zigbee end devices"
    @echo ""
    @echo "UART Wiring:"
    @echo "  XIAO TX (GPIO21) ‚Üí TinyS3 RX (GPIO44)"
    @echo "  XIAO RX (GPIO20) ‚Üí TinyS3 TX (GPIO43)"
    @echo "  Common ground required"
    @echo ""
    @just check-device

# Development workflow: build, flash, and monitor
dev: build flash monitor

# Show app size information
size:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üìè Analyzing app size..."
    idf.py size

# Show partition table
show-partitions:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üíæ Partition table:"
    idf.py partition-table

# Quick setup guide
help:
    @echo "üéÉ XIAO ESP32-C6 Zigbee Coordinator - Quick Start Guide"
    @echo "========================================================"
    @echo ""
    @echo "1Ô∏è‚É£  First time setup:"
    @echo "   just set-target       # Configure for ESP32-C6"
    @echo ""
    @echo "2Ô∏è‚É£  Build and flash:"
    @echo "   just build           # Compile the firmware"
    @echo "   just flash           # Upload to device"
    @echo "   just monitor         # View serial output"
    @echo ""
    @echo "3Ô∏è‚É£  Or do it all at once:"
    @echo "   just dev             # Build + flash + monitor"
    @echo ""
    @echo "4Ô∏è‚É£  UART connection to TinyS3:"
    @echo "   XIAO C6 TX (GPIO21) ‚Üí TinyS3 RX (GPIO44)"
    @echo "   XIAO C6 RX (GPIO20) ‚Üí TinyS3 TX (GPIO43)"
    @echo "   Common ground required"
    @echo ""
    @echo "üìö More commands: just --list"
