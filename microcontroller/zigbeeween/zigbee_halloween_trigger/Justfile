# Xiao ESP32-C6 ESP-IDF Justfile
# Easy commands for building and flashing the device

# Default device path (adjust if needed)
DEVICE_PATH := "/dev/ttyACM0"

# List all available commands
default:
    @just --list

# Set ESP-IDF target to ESP32-C6 (run once after cloning)
set-target:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üéØ Setting target to ESP32-C6..."
    idf.py set-target esp32c6
    echo "‚úÖ Target set! Now run: just build"

# Set up ESP-IDF environment and install dependencies
setup:
    @echo "üîß Setting up ESP-IDF environment..."
    @echo "Make sure you have ESP-IDF installed and sourced:"
    @echo "  . $HOME/esp/esp-idf/export.sh"
    @echo "  OR"
    @echo "  . /opt/esp-idf/export.sh"
    @echo ""
    @echo "After sourcing, run: just set-target"
    @echo ""
    @echo "Or install ESP-IDF:"
    @echo "  https://docs.espressif.com/projects/esp-idf/en/latest/esp32c6/get-started/"

# Configure the project (run menuconfig)
menuconfig:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "‚öôÔ∏è  Opening ESP-IDF configuration menu..."
    idf.py menuconfig

# Build the project
build:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üî® Building project..."
    idf.py build

# Clean build artifacts
clean:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üßπ Cleaning build artifacts..."
    idf.py fullclean

# Flash firmware to device
flash:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì• Flashing firmware to Xiao ESP32-C6..."

    DEVICE=$(../zigbee_rip_tombstone/find-xiao-esp32c6.sh)
    echo "Device found at: $DEVICE"
    echo ""
    echo "‚ö†Ô∏è  Put device in bootloader mode (tiny buttons next to USB-C):"
    echo "   1. Press and hold BOOT button"
    echo "   2. While holding BOOT, press RESET once and release"
    echo "   3. Release BOOT button"
    echo ""
    read -p "Press Enter when ready to flash..."
    echo ""

    idf.py -p "$DEVICE" flash

# Monitor serial output from device
monitor:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì∫ Monitoring device output..."
    echo "   Press Ctrl+] to exit"
    echo ""

    DEVICE=$(../zigbee_rip_tombstone/find-xiao-esp32c6.sh)
    echo "Device found at: $DEVICE"
    echo ""

    idf.py -p "$DEVICE" monitor

# Build and flash in one command
flash-monitor: build flash monitor

# Erase flash completely
erase:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üî• Erasing flash memory..."

    DEVICE=$(../zigbee_rip_tombstone/find-xiao-esp32c6.sh)
    echo "Device found at: $DEVICE"
    echo ""
    echo "‚ö†Ô∏è  This will erase ALL data on the device!"
    read -p "Press Enter to continue or Ctrl+C to cancel..."
    echo ""

    idf.py -p "$DEVICE" erase-flash

# Check if device is connected
check-device:
    @echo "üîç Checking for connected device..."
    @../zigbee_rip_tombstone/find-xiao-esp32c6.sh && echo "‚úÖ Device found!" || echo "‚ùå Device not found"

# Show device information
info:
    @echo "üìä Xiao ESP32-C6 Zigbee Halloween Trigger Project"
    @echo "================================================="
    @echo "Device: Seeed Studio Xiao ESP32-C6"
    @echo "Framework: ESP-IDF"
    @echo "Chip: ESP32-C6 (RISC-V)"
    @echo ""
    @just check-device

# Development workflow: build, flash, and monitor
dev: build flash monitor

# Show app size information
size:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üìè Analyzing app size..."
    idf.py size

# Show partition table
show-partitions:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üíæ Partition table:"
    idf.py partition-table
