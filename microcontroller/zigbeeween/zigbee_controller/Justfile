# TinyC6 ESP32-C6 ESP-IDF Justfile
# Zigbee Coordinator with Web Interface

# Default device path (adjust if needed)
DEVICE_PATH := "/dev/ttyACM0"

# List all available commands
default:
    @just --list

# Set ESP-IDF target to ESP32-C6 (run once after cloning)
set-target:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! command -v idf.py &> /dev/null; then \
        echo "‚ùå ERROR: idf.py not found!"; \
        echo ""; \
        echo "Please source ESP-IDF environment first:"; \
        echo "  . \$HOME/esp/esp-idf/export.sh"; \
        echo "  OR"; \
        echo "  . /opt/esp-idf/export.sh"; \
        echo ""; \
        echo "Then run: just set-target"; \
        exit 1; \
    fi
    echo "üéØ Setting target to ESP32-C6..."
    idf.py set-target esp32c6
    echo "‚úÖ Target set! Now run: just menuconfig (to set WiFi credentials)"

# Set up ESP-IDF environment and install dependencies
setup:
    @echo "üîß Setting up ESP-IDF environment..."
    @echo "Make sure you have ESP-IDF installed and sourced:"
    @echo "  . $HOME/esp/esp-idf/export.sh"
    @echo "  OR"
    @echo "  . /opt/esp-idf/export.sh"
    @echo ""
    @echo "After sourcing, run: just set-target"
    @echo ""
    @echo "Or install ESP-IDF:"
    @echo "  https://docs.espressif.com/projects/esp-idf/en/latest/esp32c6/get-started/"

# Configure the project (IMPORTANT: set WiFi SSID and password here!)
menuconfig:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "‚öôÔ∏è  Opening ESP-IDF configuration menu..."
    echo ""
    echo "üì° IMPORTANT: Configure WiFi credentials!"
    echo "   Navigate to: Zigbee Halloween Controller Configuration"
    echo "   Set: WiFi SSID"
    echo "   Set: WiFi Password"
    echo ""
    echo "   Press 'S' to save, 'Q' to quit"
    echo ""
    read -p "Press Enter to open menuconfig..."
    idf.py menuconfig

# Build the project
build:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! command -v idf.py &> /dev/null; then \
        echo "‚ùå ERROR: idf.py not found!"; \
        echo ""; \
        echo "Please source ESP-IDF environment first:"; \
        echo "  . \$HOME/esp/esp-idf/export.sh"; \
        echo "  OR"; \
        echo "  . /opt/esp-idf/export.sh"; \
        exit 1; \
    fi

    # Check if target is set correctly
    if [ ! -f sdkconfig ]; then \
        echo "‚ùå ERROR: sdkconfig not found!"; \
        echo ""; \
        echo "Please run: just set-target"; \
        echo "This will configure the project for ESP32-C6"; \
        exit 1; \
    fi

    if grep -q "CONFIG_IDF_TARGET=\"esp32\"" sdkconfig 2>/dev/null; then \
        echo "‚ùå ERROR: Target is set to esp32, but should be esp32c6!"; \
        echo ""; \
        echo "Please run: just set-target"; \
        echo "This will reconfigure for ESP32-C6"; \
        exit 1; \
    fi

    echo "üî® Building project..."
    idf.py build

# Clean build artifacts
clean:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üßπ Cleaning build artifacts..."
    idf.py fullclean

# Flash firmware to device
flash:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì• Flashing firmware to TinyC6 ESP32-C6..."
    echo ""
    echo "‚ö†Ô∏è  Put device in bootloader mode:"
    echo "   1. Hold BOOT button"
    echo "   2. Press and release RESET button"
    echo "   3. Release BOOT button"
    echo ""
    read -p "Press Enter when ready to flash..."
    echo ""
    echo "‚è≥ Waiting for device in bootloader mode..."

    # Poll for device with timeout
    TIMEOUT=10
    ELAPSED=0
    while [ $ELAPSED -lt $TIMEOUT ]; do
        if DEVICE=$(./find-tinyc6.sh 2>/dev/null); then
            echo "‚úì Device found at: $DEVICE"
            echo ""
            idf.py -p "$DEVICE" flash
            exit 0
        fi
        sleep 0.5
        ELAPSED=$((ELAPSED + 1))
    done

    echo "‚ùå Timeout: Device not found after ${TIMEOUT} seconds"
    exit 1

# Monitor serial output from device
monitor:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì∫ Monitoring device output..."
    echo "   Press Ctrl+] to exit"
    echo "   To reset: Ctrl+T then Ctrl+R"
    echo ""

    DEVICE=$(./find-tinyc6.sh)
    echo "Device found at: $DEVICE"
    echo ""
    echo "üí° TIP: Use Ctrl+T then Ctrl+R to reset device (don't use physical button)"
    echo ""

    idf.py -p "$DEVICE" monitor

# Build and flash in one command
flash-monitor: build flash monitor

# Erase flash completely
erase:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üî• Erasing flash memory..."

    DEVICE=$(./find-tinyc6.sh)
    echo "Device found at: $DEVICE"
    echo ""
    echo "‚ö†Ô∏è  This will erase ALL data on the device!"
    read -p "Press Enter to continue or Ctrl+C to cancel..."
    echo ""

    idf.py -p "$DEVICE" erase-flash

# Check if device is connected
check-device:
    @echo "üîç Checking for connected device..."
    @./find-tinyc6.sh && echo "‚úÖ Device found!" || echo "‚ùå Device not found"

# Show device information
info:
    @echo "üìä TinyC6 Zigbee Halloween Controller"
    @echo "========================================"
    @echo "Device: TinyC6 ESP32-C6"
    @echo "Framework: ESP-IDF"
    @echo "Chip: ESP32-C6 (RISC-V)"
    @echo "Role: Zigbee Coordinator"
    @echo "Features:"
    @echo "  - WiFi web interface"
    @echo "  - NTP time sync (LA timezone)"
    @echo "  - PIR motion detection"
    @echo "  - OLED status display"
    @echo "  - Controls 2 Zigbee end devices"
    @echo ""
    @just check-device

# Development workflow: build, flash, and monitor
dev: build flash monitor

# Show app size information
size:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üìè Analyzing app size..."
    idf.py size

# Show partition table
show-partitions:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üíæ Partition table:"
    idf.py partition-table

# Quick setup guide
help:
    @echo "üéÉ Zigbee Halloween Controller - Quick Start Guide"
    @echo "===================================================="
    @echo ""
    @echo "1Ô∏è‚É£  First time setup:"
    @echo "   just set-target       # Configure for ESP32-C6"
    @echo "   just menuconfig       # Set WiFi credentials!"
    @echo "                         # Go to: Zigbee Halloween Controller Configuration"
    @echo ""
    @echo "2Ô∏è‚É£  Build and flash:"
    @echo "   just build           # Compile the firmware"
    @echo "   just flash           # Upload to device"
    @echo "   just monitor         # View serial output"
    @echo ""
    @echo "3Ô∏è‚É£  Or do it all at once:"
    @echo "   just dev             # Build + flash + monitor"
    @echo ""
    @echo "4Ô∏è‚É£  Access web interface:"
    @echo "   After flashing, check serial monitor for IP address"
    @echo "   Open http://<device-ip>/ in your browser"
    @echo ""
    @echo "üìö More commands: just --list"
