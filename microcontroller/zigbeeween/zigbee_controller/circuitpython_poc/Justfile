# TinyC6 ESP32-S3 CircuitPython Justfile
# Easy commands for flashing and managing the device

# Default device path (adjust if needed)
DEVICE_PATH := "/dev/ttyACM0"
MOUNT_PATH := "/media/CIRCUITPY"

# List all available commands
default:
    @just --list

# Generate dependency lockfile
uv-lock:
    uv lock

# Install development dependencies
install-deps:
    uv venv --clear
    uv sync --all-extras --locked

# Install required CircuitPython libraries
install-libs:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üìö Installing CircuitPython libraries..."
    echo "Device type: JTAG-only (no USB mount)"
    DEVICE=$(./find-tinyc6.sh)

    # Create local library staging directory
    mkdir -p .circuitpy-libs/lib

    # Download CircuitPython bundle if not present
    if [ ! -d ".circuitpy-libs/bundle" ]; then
        echo "Fetching latest bundle URL..."
        BUNDLE_URL=$(curl -sL "https://api.github.com/repos/adafruit/Adafruit_CircuitPython_Bundle/releases/latest" | grep "browser_download_url.*9.x.*mpy.*\.zip" | head -1 | cut -d'"' -f4)

        if [ -z "$BUNDLE_URL" ]; then
            echo "ERROR: Could not find bundle download URL"
            exit 1
        fi

        echo "Downloading CircuitPython library bundle from: $BUNDLE_URL"
        curl -L -o .circuitpy-libs/bundle.zip "$BUNDLE_URL"

        if [ $? -ne 0 ]; then
            echo "ERROR: Failed to download bundle"
            exit 1
        fi

        echo "Extracting bundle..."
        unzip -q .circuitpy-libs/bundle.zip -d .circuitpy-libs/
        mv .circuitpy-libs/adafruit-circuitpython-bundle-* .circuitpy-libs/bundle
        rm .circuitpy-libs/bundle.zip
        echo "Bundle extracted successfully"
    else
        echo "Using cached bundle"
    fi

    # Copy required libraries
    echo "Copying libraries to staging area..."
    cp -r .circuitpy-libs/bundle/lib/adafruit_displayio_ssd1306* .circuitpy-libs/lib/ || echo "Warning: adafruit_displayio_ssd1306 not found"
    cp -r .circuitpy-libs/bundle/lib/adafruit_display_text* .circuitpy-libs/lib/ || echo "Warning: adafruit_display_text not found"
    cp -r .circuitpy-libs/bundle/lib/adafruit_framebuf* .circuitpy-libs/lib/ || echo "Warning: adafruit_framebuf not found"

    echo "‚úÖ Libraries downloaded to .circuitpy-libs/lib/"
    ls -la .circuitpy-libs/lib/
    echo ""
    echo "üì§ Transferring libraries to device at $DEVICE..."
    echo ""
    echo "‚ö†Ô∏è  If transfer hangs or fails, put device in REPL mode:"
    echo "   Option 1: Press and release the BOOT button on the device"
    echo "   Option 2: Connect via serial (just monitor) and press Ctrl+C"
    echo ""
    read -p "Press Enter when ready to continue..."
    echo ""

    # Try to enter REPL by sending Ctrl+C
    echo "Attempting to enter REPL mode..."
    printf "\x03\x03" > "$DEVICE" 2>/dev/null || true
    sleep 1

    # Count total items
    total=$(ls -1 .circuitpy-libs/lib/ | wc -l)
    current=0

    # Ensure /lib directory exists on device
    echo "Creating /lib directory on device..."
    uv run ampy --port "$DEVICE" --delay 1 mkdir /lib 2>/dev/null || echo "  /lib already exists (OK)"

    # Transfer each library file/directory using ampy
    for item in .circuitpy-libs/lib/*; do
        current=$((current + 1))
        basename=$(basename "$item")

        # Remove old version if it exists
        echo "  [$current/$total] Removing old $basename (if exists)..."
        uv run ampy --port "$DEVICE" --delay 1 rm "/lib/$basename" 2>/dev/null || true

        if [ -d "$item" ]; then
            file_count=$(find "$item" -type f | wc -l)
            echo "  [$current/$total] Uploading directory $basename ($file_count files)..."

            # Create the directory on the device first
            uv run ampy --port "$DEVICE" --delay 1 mkdir "/lib/$basename" 2>/dev/null || true

            # Upload each file in the directory individually
            find "$item" -type f | while read file; do
                relative_path=$(echo "$file" | sed "s|$item/||")
                remote_path="/lib/$basename/$relative_path"
                remote_dir=$(dirname "$remote_path")

                # Create subdirectory if needed
                if [ "$remote_dir" != "/lib/$basename" ]; then
                    uv run ampy --port "$DEVICE" --delay 1 mkdir "$remote_dir" 2>/dev/null || true
                fi

                echo "    Uploading $relative_path..."
                uv run ampy --port "$DEVICE" --delay 1 put "$file" "$remote_path" 2>&1 | grep -v "SyntaxWarning" | grep -v "invalid escape sequence" || true

                if [ ${PIPESTATUS[0]} -ne 0 ]; then
                    echo "ERROR: Failed to upload $relative_path"
                    exit 1
                fi
            done
        else
            size=$(du -h "$item" | cut -f1)
            echo "  [$current/$total] Uploading $basename ($size)..."
            uv run ampy --port "$DEVICE" --delay 1 put "$item" "/lib/$basename" 2>&1 | grep -v "SyntaxWarning" | grep -v "invalid escape sequence" || true

            if [ ${PIPESTATUS[0]} -ne 0 ]; then
                echo "ERROR: Failed to upload $basename"
                exit 1
            fi
        fi

        echo "    ‚úì Done"
    done

    echo ""
    echo "‚úÖ All libraries transferred successfully!"

# Run all code quality checks (format, lint, type check)
audit:
    uv run ruff format .
    uv run ruff check --fix .
    uv run mypy .

# Flash CircuitPython firmware to TinyC6 via serial
flash firmware_bin:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì• Flashing CircuitPython firmware to TinyC6..."

    # Check if firmware file exists
    if [ ! -f "{{firmware_bin}}" ]; then
        echo "ERROR: Firmware file not found: {{firmware_bin}}"
        exit 1
    fi

    DEVICE=$(./find-tinyc6.sh)
    echo "Device found at: $DEVICE"
    echo ""
    echo "‚ö†Ô∏è  Put device in bootloader mode:"
    echo "   1. Hold BOOT button"
    echo "   2. Press and release RESET button"
    echo "   3. Release BOOT button"
    echo ""
    read -p "Press Enter when device is in bootloader mode..."
    echo ""

    echo "üî• Erasing flash..."
    uv run esptool.py --chip esp32c6 --port "$DEVICE" erase_flash

    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to erase flash"
        exit 1
    fi

    echo ""
    echo "üì§ Writing firmware..."
    uv run esptool.py --chip esp32c6 --port "$DEVICE" --baud 460800 write_flash -z 0x0 "{{firmware_bin}}"

    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to write firmware"
        exit 1
    fi

    echo ""
    echo "‚úÖ Firmware flashed successfully!"
    echo "üîÑ Device will restart automatically"
    echo ""
    echo "üí° Next steps:"
    echo "   1. Wait for device to boot (~5 seconds)"
    echo "   2. Run: just install-libs"
    echo "   3. Run: just deploy"

# Deploy code.py to the device via serial
deploy:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üìÑ Deploying code.py to device..."

    if [ ! -f "code.py" ]; then
        echo "ERROR: code.py not found"
        exit 1
    fi

    DEVICE=$(./find-tinyc6.sh)
    echo "Device found at: $DEVICE"
    echo ""
    echo "‚ö†Ô∏è  Put device in REPL mode:"
    echo "   Press and hold the BOOT button for 1 second, then release"
    echo ""
    read -p "Press Enter when ready to continue..."
    echo ""

    # Try to enter REPL
    echo "Attempting to enter REPL mode..."
    printf "\x03\x03" > "$DEVICE" 2>/dev/null || true
    sleep 1

    # Upload code.py
    echo "Uploading code.py..."
    uv run ampy --port "$DEVICE" --delay 1 put code.py /code.py 2>&1 | grep -v "SyntaxWarning" | grep -v "invalid escape sequence" || true

    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo "ERROR: Failed to upload code.py"
        exit 1
    fi

    echo "‚úÖ Code deployed successfully!"
    echo ""
    echo "üîÑ Restarting device..."
    # Send Ctrl+D to soft reboot the device
    printf "\x04" > "$DEVICE" 2>/dev/null || true
    sleep 2

    echo "‚úÖ Device restarted!"
    echo ""
    echo "üí° Monitor output with: just monitor"

# Monitor serial output from the device
monitor:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üì∫ Monitoring device output..."
    echo "   Press Ctrl+A then K to exit screen"
    echo "   Or Ctrl+C to exit Python serial monitor"
    echo ""

    DEVICE=$(./find-tinyc6.sh)
    echo "Device found at: $DEVICE"
    echo ""

    if command -v screen >/dev/null 2>&1; then
        screen "$DEVICE" 115200
    else
        uv run python -m serial.tools.miniterm "$DEVICE" 115200
    fi

# Check if device is connected
check-device:
    @echo "üîç Checking for connected device..."
    @if [ -c "{{DEVICE_PATH}}" ]; then \
        echo "‚úÖ Device found at {{DEVICE_PATH}}"; \
        ls -la {{DEVICE_PATH}}; \
    else \
        echo "‚ùå No device found at {{DEVICE_PATH}}"; \
        echo "   Try these paths:"; \
        ls -la /dev/ttyACM* 2>/dev/null || echo "   No /dev/ttyACM* devices"; \
        ls -la /dev/ttyUSB* 2>/dev/null || echo "   No /dev/ttyUSB* devices"; \
    fi
    @echo ""
    @if [ -d "{{MOUNT_PATH}}" ]; then \
        echo "‚úÖ CircuitPython drive found at {{MOUNT_PATH}}"; \
        ls -la "{{MOUNT_PATH}}/"; \
    else \
        echo "‚ùå CircuitPython drive not found at {{MOUNT_PATH}}"; \
        echo "   Try these mount points:"; \
        ls -la /media/ 2>/dev/null | grep CIRCUIT || echo "   No CIRCUITPY drives found"; \
    fi

# Reset the device
reset:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "üîÑ Resetting device..."

    DEVICE=$(./find-tinyc6.sh)
    echo "Device found at: $DEVICE"

    if command -v stty >/dev/null 2>&1; then
        stty -F "$DEVICE" 1200
        sleep 2
        echo "‚úÖ Reset signal sent"
    else
        echo "‚ùå stty not available, please press RESET button manually"
        exit 1
    fi

# Clean up generated files on device
clean:
    @echo "üßπ Cleaning up device files..."
    @if [ -d "{{MOUNT_PATH}}" ]; then \
        rm -f "{{MOUNT_PATH}}/pir_motion_test_start.txt"; \
        rm -f "{{MOUNT_PATH}}/pir_motion_test_end.txt"; \
        echo "‚úÖ Cleanup complete"; \
    else \
        echo "‚ùå Device not mounted at {{MOUNT_PATH}}"; \
    fi

# Complete setup: flash firmware, install libs, deploy code
setup:
    @echo "üöÄ Complete TinyC6 setup..."
    @echo ""
    @echo "Step 1: Flash CircuitPython firmware"
    just flash-circuitpython
    @echo ""
    @echo "Press Enter when CircuitPython is installed and device has restarted..."
    @read dummy
    @echo ""
    @echo "Step 2: Install libraries"
    just install-libs
    @echo ""
    @echo "Step 3: Deploy code"
    just deploy
    @echo ""
    @echo "Step 4: Monitor output"
    just monitor

# Show device information
info:
    @echo "üìä TinyC6 PIR Motion Sensor Project"
    @echo "=================================="
    @echo "Device: TinyC6 ESP32-S3"
    @echo "PIR Sensor: Pin IO18"
    @echo "OLED: I2C on IO6(SDA)/IO7(SCL)"
    @echo "NeoPixel: Built-in"
    @echo "Battery: VBAT monitoring"
    @echo "USB Detection: GPIO10"
    @echo ""
    just check-device

# Development workflow: deploy code and monitor
dev:
    just deploy
    just monitor

# Open Thonny IDE for CircuitPython development
thonny:
    @echo "üêç Opening Thonny IDE..."
    source .venv/bin/activate && thonny &

# Emergency: force reset and clean
emergency:
    @echo "üö® Emergency reset and clean..."
    just reset
    sleep 3
    just clean
    @echo "‚úÖ Emergency procedures complete"
